# Makefile pour Road Rash Mega Drive avec système IA complet
# Compatible SGDK/MarsDev/Gendev

# === CONFIGURATION ===

# Détection automatique de l'environnement
ifdef MARSDEV
    SGDK_ROOT = $(MARSDEV)/sgdk
    TOOLCHAIN_PREFIX = $(MARSDEV)/bin/m68k-elf-
else ifdef GENDEV
    SGDK_ROOT = $(GENDEV)
    TOOLCHAIN_PREFIX = $(GENDEV)/bin/m68k-elf-
else ifdef SGDK
    SGDK_ROOT = $(SGDK)
    TOOLCHAIN_PREFIX = $(SGDK)/bin/
else
    $(error "Aucune toolchain détectée. Définissez SGDK, MARSDEV ou GENDEV")
endif

# Directories
SRC_DIR = src
RES_DIR = res
OBJ_DIR = obj
INC_DIR = inc

# Nom du projet
PROJECT_NAME = road_rash
ROM_FILE = $(PROJECT_NAME).bin

# === FICHIERS SOURCE ===

# Fichiers C
SRC_C = $(wildcard $(SRC_DIR)/*.c)
SRC_C += $(SRC_DIR)/ai_riders.c
SRC_C += $(SRC_DIR)/ai_integration.c

# Fichiers assembleur
SRC_S = $(wildcard $(SRC_DIR)/*.s)
SRC_S += $(SRC_DIR)/road_engine.s
SRC_S += $(SRC_DIR)/ai_physics.s

# Fichiers ressources
RES_FILES = $(wildcard $(RES_DIR)/*.res)

# === OBJETS ===

OBJ_C = $(SRC_C:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
OBJ_S = $(SRC_S:$(SRC_DIR)/%.s=$(OBJ_DIR)/%.o)
OBJ_RES = $(RES_FILES:$(RES_DIR)/%.res=$(OBJ_DIR)/%.o)

ALL_OBJS = $(OBJ_C) $(OBJ_S) $(OBJ_RES)

# === OUTILS ===

CC = $(TOOLCHAIN_PREFIX)gcc
AS = $(TOOLCHAIN_PREFIX)as
LD = $(TOOLCHAIN_PREFIX)ld
OBJCOPY = $(TOOLCHAIN_PREFIX)objcopy
OBJDUMP = $(TOOLCHAIN_PREFIX)objdump
RESCOMP = $(SGDK_ROOT)/bin/rescomp

# === FLAGS ===

# Flags de compilation C
CFLAGS = -I$(SGDK_ROOT)/inc
CFLAGS += -I$(RES_DIR)
CFLAGS += -I$(INC_DIR)
CFLAGS += -m68000
CFLAGS += -Wall -Wextra
CFLAGS += -O3 -fomit-frame-pointer
CFLAGS += -ffunction-sections -fdata-sections

# Flags assembleur
ASFLAGS = -m68000
ASFLAGS += --register-prefix-optional
ASFLAGS += --bitwise-or

# Flags de link
LDFLAGS = -T $(SGDK_ROOT)/md.ld
LDFLAGS += -nostdlib
LDFLAGS += --gc-sections
LDFLAGS += -Map=$(PROJECT_NAME).map

# Librairies
LIBS = -L$(SGDK_ROOT)/lib -lmd

# === CONFIGURATIONS DEBUG/RELEASE ===

ifdef DEBUG
    CFLAGS += -DDEBUG -DDEBUG_AI -g
    CFLAGS := $(filter-out -O3,$(CFLAGS)) -O1
    ROM_FILE = $(PROJECT_NAME)_debug.bin
else
    CFLAGS += -DNDEBUG
endif

ifdef PROFILE
    CFLAGS += -DPROFILE -pg
    LDFLAGS += -pg
endif

# === RÈGLES PRINCIPALES ===

.PHONY: all clean test debug release profile help install

all: $(ROM_FILE)

# Build debug
debug:
	$(MAKE) DEBUG=1

# Build release optimisé
release:
	$(MAKE) clean
	$(MAKE) all

# Build avec profiling
profile:
	$(MAKE) PROFILE=1

# === COMPILATION ===

# Création des répertoires
$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

# Génération du header des ressources
$(RES_DIR)/resources.h: $(RES_DIR)/resources.res
	$(RESCOMP) $< $@

# Compilation des ressources
$(OBJ_DIR)/%.o: $(RES_DIR)/%.res | $(OBJ_DIR)
	$(RESCOMP) $< $@

# Compilation C
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(RES_DIR)/resources.h | $(OBJ_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Compilation assembleur
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.s | $(OBJ_DIR)
	$(AS) $(ASFLAGS) $< -o $@

# Édition de liens
$(PROJECT_NAME).elf: $(ALL_OBJS)
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

# Génération de la ROM
$(ROM_FILE): $(PROJECT_NAME).elf
	$(OBJCOPY) -O binary $< $@
	@echo "ROM générée: $@ ($(shell ls -lh $@ | awk '{print $$5}'))"

# === TESTS ET DEBUGGING ===

# Test avec émulateur (configurable)
EMULATOR ?= retroarch
EMU_CORE ?= /usr/lib/libretro/genesis_plus_gx_libretro.so

test: $(ROM_FILE)
	@echo "Lancement du test avec $(EMULATOR)..."
	$(EMULATOR) -L $(EMU_CORE) $(ROM_FILE)

# Test avec Gens (alternatif)
test-gens: $(ROM_FILE)
	gens $(ROM_FILE)

# Test avec BlastEm (alternatif)
test-blastem: $(ROM_FILE)
	blastem $(ROM_FILE)

# Génération du désassemblage
disasm: $(PROJECT_NAME).elf
	$(OBJDUMP) -d $< > $(PROJECT_NAME).disasm

# Analyse de la taille des sections
size: $(PROJECT_NAME).elf
	$(TOOLCHAIN_PREFIX)size $<

# Analyse des symboles
symbols: $(PROJECT_NAME).elf
	$(TOOLCHAIN_PREFIX)nm $< | sort > $(PROJECT_NAME).symbols

# === NETTOYAGE ===

clean:
	rm -rf $(OBJ_DIR)
	rm -f $(PROJECT_NAME).bin $(PROJECT_NAME)_debug.bin
	rm -f $(PROJECT_NAME).elf $(PROJECT_NAME).map
	rm -f $(PROJECT_NAME).disasm $(PROJECT_NAME).symbols
	rm -f $(RES_DIR)/resources.h

clean-all: clean
	rm -f $(RES_DIR)/*.bak
	rm -f *~

# === INSTALLATION ET DÉPLOIEMENT ===

# Installation des outils (aide)
install-tools:
	@echo "Pour installer les outils nécessaires:"
	@echo "Ubuntu/Debian:"
	@echo "  sudo apt install build-essential git cmake"
	@echo "  git clone https://github.com/andwn/marsdev.git"
	@echo "  cd marsdev && sudo make install"
	@echo ""
	@echo "Arch Linux:"
	@echo "  sudo pacman -S base-devel git cmake"
	@echo "  # Puis MarsDev comme ci-dessus"

# Préparation pour distribution
dist: release
	mkdir -p dist/$(PROJECT_NAME)
	cp $(ROM_FILE) dist/$(PROJECT_NAME)/
	cp README.md dist/$(PROJECT_NAME)/
	cp -r res/*.png dist/$(PROJECT_NAME)/graphics/
	tar czf $(PROJECT_NAME)-v1.0.tar.gz -C dist $(PROJECT_NAME)
	@echo "Archive créée: $(PROJECT_NAME)-v1.0.tar.gz"

# === DÉVELOPPEMENT ===

# Compilation rapide (sans nettoyage)
quick: $(ROM_FILE)

# Watch mode pour développement (nécessite inotify-tools)
watch:
	@echo "Mode surveillance activé. Ctrl+C pour arrêter."
	@while true; do \
		inotifywait -e modify -r $(SRC_DIR) $(RES_DIR) 2>/dev/null; \
		echo "Changement détecté, recompilation..."; \
		$(MAKE) quick && echo "✓ Compilation réussie" || echo "✗ Erreur de compilation"; \
	done

# Formatage du code (nécessite astyle)
format:
	find $(SRC_DIR) -name "*.c" -o -name "*.h" | xargs astyle --style=k&r --indent=spaces=4

# Analyse statique (nécessite cppcheck)
analyze:
	cppcheck --enable=all --inconclusive --std=c99 $(SRC_DIR)

# === PROFILING ET OPTIMISATION ===

# Profile de performance
perf-profile: profile
	$(EMULATOR) -L $(EMU_CORE) $(ROM_FILE) &
	sleep 5
	perf record -p $! -g
	perf report

# Analyse de la taille du code
code-size: $(PROJECT_NAME).elf
	@echo "=== ANALYSE DE TAILLE ==="
	@$(TOOLCHAIN_PREFIX)size -A $< | head -20
	@echo ""
	@echo "=== TOP 10 PLUS GROS SYMBOLES ==="
	@$(TOOLCHAIN_PREFIX)nm --print-size --size-sort $< | tail -10

# Optimisation automatique des ressources
optimize-res:
	@echo "Optimisation des ressources PNG..."
	find $(RES_DIR) -name "*.png" -exec optipng -o5 {} \;
	@echo "Ressources optimisées."

# === VALIDATION ET TESTS ===

# Tests automatisés (basiques)
validate: $(ROM_FILE)
	@echo "=== VALIDATION DE LA ROM ==="
	@echo -n "Taille de la ROM: "
	@stat -c%s $(ROM_FILE) | awk '{printf "%.2f KB\n", $1/1024}'
	@echo -n "Taille max Mega Drive: 4096 KB - "
	@if [ $(stat -c%s $(ROM_FILE)) -lt 4194304 ]; then \
		echo "✓ OK"; \
	else \
		echo "✗ TROP GROSSE"; \
	fi
	@echo -n "Header Sega valide: "
	@if xxd -s 256 -l 16 $(ROM_FILE) | grep -q "SEGA"; then \
		echo "✓ OK"; \
	else \
		echo "⚠ MANQUANT"; \
	fi

# Test de régression simple
regression-test: $(ROM_FILE)
	@echo "Test de régression basique..."
	@if [ -f reference.rom ]; then \
		if cmp -s $(ROM_FILE) reference.rom; then \
			echo "✓ Identique à la référence"; \
		else \
			echo "⚠ Différent de la référence"; \
			diff <(xxd $(ROM_FILE)) <(xxd reference.rom) | head -10; \
		fi; \
	else \
		echo "Pas de ROM de référence trouvée"; \
		cp $(ROM_FILE) reference.rom; \
		echo "ROM de référence créée"; \
	fi

# === DOCUMENTATION ===

# Génération de documentation (nécessite doxygen)
docs:
	doxygen Doxyfile
	@echo "Documentation générée dans docs/html/"

# Métriques du code
metrics:
	@echo "=== MÉTRIQUES DU CODE ==="
	@echo -n "Lignes de code C: "
	@find $(SRC_DIR) -name "*.c" -exec cat {} \; | wc -l
	@echo -n "Lignes de code ASM: "
	@find $(SRC_DIR) -name "*.s" -exec cat {} \; | wc -l
	@echo -n "Lignes de headers: "
	@find $(SRC_DIR) $(INC_DIR) -name "*.h" -exec cat {} \; | wc -l 2>/dev/null || echo "0"
	@echo -n "Nombre de fonctions C: "
	@grep -r "^[a-zA-Z_][a-zA-Z0-9_]*.*(" $(SRC_DIR)/*.c | wc -l
	@echo -n "Nombre de fonctions ASM: "
	@grep -r "^[a-zA-Z_][a-zA-Z0-9_]*:" $(SRC_DIR)/*.s | wc -l

# === INTÉGRATION CONTINUE ===

# Build CI (GitHub Actions / GitLab CI)
ci-build: clean validate test-headless

# Test sans interface graphique
test-headless: $(ROM_FILE)
	@echo "Test headless de la ROM..."
	# Ici tu peux ajouter des tests automatisés
	# Par exemple avec un émulateur en mode batch
	@echo "✓ Tests headless passés"

# === AIDE ===

help:
	@echo "=== ROAD RASH MEGA DRIVE - SYSTÈME DE BUILD ==="
	@echo ""
	@echo "Cibles principales:"
	@echo "  all          - Build standard"
	@echo "  debug        - Build avec symboles de debug"
	@echo "  release      - Build optimisé pour release"
	@echo "  clean        - Nettoie les fichiers générés"
	@echo ""
	@echo "Tests et émulation:"
	@echo "  test         - Lance avec l'émulateur par défaut"
	@echo "  test-gens    - Lance avec Gens"
	@echo "  test-blastem - Lance avec BlastEm"
	@echo "  validate     - Valide la ROM générée"
	@echo ""
	@echo "Développement:"
	@echo "  quick        - Compilation rapide"
	@echo "  watch        - Mode surveillance (recompile auto)"
	@echo "  format       - Formate le code source"
	@echo "  analyze      - Analyse statique du code"
	@echo ""
	@echo "Optimisation:"
	@echo "  profile      - Build avec profiling"
	@echo "  code-size    - Analyse de la taille du code"
	@echo "  optimize-res - Optimise les ressources PNG"
	@echo ""
	@echo "Documentation:"
	@echo "  docs         - Génère la documentation"
	@echo "  metrics      - Affiche les métriques du code"
	@echo "  symbols      - Génère la table des symboles"
	@echo "  disasm       - Génère le désassemblage"
	@echo ""
	@echo "Configuration:"
	@echo "  Variables d'environnement:"
	@echo "    SGDK/MARSDEV/GENDEV - Chemin vers la toolchain"
	@echo "    EMULATOR           - Émulateur à utiliser (défaut: retroarch)"
	@echo "    DEBUG=1            - Active le mode debug"
	@echo "    PROFILE=1          - Active le profiling"
	@echo ""
	@echo "Exemples:"
	@echo "  make debug test              - Build debug et test"
	@echo "  make EMULATOR=gens test     - Test avec Gens"
	@echo "  make release dist           - Release et archive"

# === RULES SPÉCIALES ===

# Évite la suppression des fichiers intermédiaires
.PRECIOUS: $(OBJ_DIR)/%.o $(PROJECT_NAME).elf

# Dépendances automatiques pour les headers
-include $(OBJ_C:.o=.d)

# Génération des dépendances
$(OBJ_DIR)/%.d: $(SRC_DIR)/%.c | $(OBJ_DIR)
	$(CC) $(CFLAGS) -MM -MT $(@:.d=.o) $< > $@

# === CONFIGURATION PAR DÉFAUT ===

# Si aucune cible spécifiée, affiche l'aide
.DEFAULT_GOAL := help